@using MSS.CrossCuttingConcerns.Infrastructure.ConstantData;

<EditForm EditContext="editContext" OnValidSubmit="RequestRegisterAsync">
    <ObjectGraphDataAnnotationsValidator />
    <div class="mss-container mss-container-info mb-5">
        <h5>Email requirements</h5>

        <ul>
            <li>Be of a respectable domain such as: <i>@String.Join(", ", Validation.VALID_EMAIL_DOMAINS)</i></li>
            <li>Contain one @@ symbol</li>
            <li>Contain atleast one dot (.)</li>
        </ul>
    </div>

    <div class="mss-container mss-container-info mb-5">
        <h5>Password requirements</h5>

        <ul>
            @for (int i = 0; i < Validation.VALID_PASSWORD_REQUIREMENTS.Length; i++)
            {
                <li>@Validation.VALID_PASSWORD_REQUIREMENTS[i]</li>
            }
        </ul>
    </div>

    <div class="row mb-4">
        <div class="col">
            <MSSTextBox TextBoxCSS="@emailCSS" IconCSS="@emailIconCSS" Label="Email" Type="email" @bind-Value="inputModel.Email" PlaceHolderText="Enter a valid e-mail address" 
                        ValidationFor="() => inputModel.Email"/>
        </div>
    </div>

    <div class="row mb-2">
        <div class="col">
            <MSSTextBox TextBoxCSS="@passwordOneCSS" IconCSS="@passwordOneIconCSS" Label="Password" Type="@(showPassword ? "text" : "password")" @bind-Value="inputModel.Password" 
                        PlaceHolderText="Enter password" ValidationFor="() => inputModel.Password" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <MSSTextBox TextBoxCSS="@passwordTwoCSS" IconCSS="@passwordTwoIconCSS" Type="@(showPassword ? "text" : "password")" @bind-Value="inputModel.PasswordTwo" 
                        PlaceHolderText="Repeat password" ValidationFor="() => inputModel.PasswordTwo" />
        </div>

        <div class="col-sm col-sm-auto">
            <input type="checkbox" @bind-value="showPassword" />
            <label>Show</label>
        </div>
    </div>

    <div class="row justify-content-end">
        <div class="col-auto">
            <button type="submit" @onclick="async () => await RequestRegisterAsync()" class="@(canSubmit ? null : "disabled")">Submit</button>
        </div>

        <div class="col-auto">
            <button @onclick="async () => await DialogService.Close()">Cancel</button>
        </div>
    </div>
</EditForm>
