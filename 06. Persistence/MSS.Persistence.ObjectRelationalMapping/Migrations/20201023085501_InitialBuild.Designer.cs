// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectRelationalMapping.Shared.Database;

namespace MSS.Persistence.ObjectRelationalMapping.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201023085501_InitialBuild")]
    partial class InitialBuild
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MSS.Domain.Concrete.DatabaseEntities.Credit.Credit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreditCategoryFK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HTMLDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTMLGotFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTMLMadeBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDateUTC")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("CreditCategoryId");

                    b.ToTable("Credits");

                    b.HasData(
                        new
                        {
                            Id = "2f28bfa3-19a8-49b8-a157-81b39b4c3a97",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditCategoryFK = "23c10c40-f245-440c-b62c-73d83cf76b45",
                            HTMLDescription = "<p>Some tasks while creating an UI are repetative. Syncfusion helps by providing components for repetative use.</p>",
                            HTMLGotFrom = "Got from: <a href='https://www.syncfusion.com/products/communitylicense'>Syncfusion community license</a>",
                            HTMLMadeBy = "Made by: <a href='https://www.syncfusion.com/blazor-components'>Syncfusion website</a>",
                            LinkToImage = "https://cdn.syncfusion.com/content/images/Logo/Logo_150dpi.png",
                            SubTitle = "Easy to use premade Blazor components",
                            Title = "Syncfusion"
                        },
                        new
                        {
                            Id = "64459974-6426-4b70-8ec1-6d6a27c08e20",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditCategoryFK = "d108ec3f-71f4-4a51-828e-7e04b61f6cd2",
                            HTMLDescription = "<p>Most, if not all icons came from this provider. This font came with the project when it was created. I kept it for its ease of use.</p>",
                            HTMLGotFrom = "<a href='https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor'>Blazor WebAssembly project builder</a>",
                            HTMLMadeBy = "<a href='https://useiconic.com/open'>Open-Iconic</a>",
                            LinkToImage = "https://img.stackshare.io/service/3029/iconic.png",
                            SubTitle = "Provider of fonts and icons",
                            Title = "Open Iconic"
                        },
                        new
                        {
                            Id = "c0866589-ebcb-4b6b-8f63-7df50fbdb284",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditCategoryFK = "d108ec3f-71f4-4a51-828e-7e04b61f6cd2",
                            HTMLDescription = "<p>Tim Corey provides many educational video's and tutorials about programming. His content is focused on C# but he covers other languages too. His goal is to make learning C# easier. Awesome guy.</p>",
                            HTMLGotFrom = "Searching for tutorial video's on <a href='https://www.youtube.com'>YouTube</a> about C#",
                            HTMLMadeBy = "<a href='https://www.youtube.com/timcorey'>Tim Corey's YouTube channel</a>",
                            LinkToImage = "https://avatars3.githubusercontent.com/u/1839873?s=400&v=4",
                            SubTitle = "Youtuber with the best C# tuturials",
                            Title = "Tim Corey"
                        },
                        new
                        {
                            Id = "5ebd0afa-4a30-4485-a52d-f72ecb4eda7b",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditCategoryFK = "d108ec3f-71f4-4a51-828e-7e04b61f6cd2",
                            HTMLDescription = "<p>Pluralsight has helped me better understand software architecture and desighn patterns. The video's are very thorough and helpfull. One thing is that there is so much info that sometimes it takes long to find something specific.</p>",
                            HTMLGotFrom = "ITvitae giving me an account on <a href='https://www.pluralsight.com/'>Pluralsight</a>",
                            HTMLMadeBy = "<a href='https://www.pluralsight.com/content/pluralsight/en/about/jcr:content/main/generic_block_167843627/parsys/columns/column-parsys-1/executive/parsys/executive_member/gridimage-res.img.75734133-ac30-41ab-8e2a-4b7033ca7e10.jpg'>CEO Aaron Skonnard</a>",
                            LinkToImage = "https://pbs.twimg.com/profile_images/1291779527576653824/vifRmgyc.jpg",
                            SubTitle = "Best educational video streaming service",
                            Title = "Pluralsight"
                        });
                });

            modelBuilder.Entity("MSS.Domain.Concrete.DatabaseEntities.Credit.CreditCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDateUTC")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("CreditCategories");

                    b.HasData(
                        new
                        {
                            Id = "23c10c40-f245-440c-b62c-73d83cf76b45",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubTitle = "Sources that made UI development easier",
                            Title = "Don't reinvent the wheel"
                        },
                        new
                        {
                            Id = "d108ec3f-71f4-4a51-828e-7e04b61f6cd2",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubTitle = "Sources that helped me gaining knowledge  about programming related subjects",
                            Title = "Food for the brain"
                        });
                });

            modelBuilder.Entity("MSS.Domain.Concrete.DatabaseEntities.UserAccount.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Affix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModificationDateUTC")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "20d5598f-d724-46c0-8e95-d8cdfc983b4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bea99a71-014f-44ba-aa28-593c072d72ba",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maurice.slegtenhorst@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Maurice",
                            IsAdmitted = true,
                            LastName = "Slegtenhorst",
                            LockoutEnabled = true,
                            NormalizedEmail = "MAURICE.SLEGTENHORST@OUTLOOK.COM",
                            NormalizedUserName = "MAURICE.SLEGTENHORST@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "0645377536",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ebb81d6b-8cd2-4fa5-b56b-adbba6d20f6d",
                            TwoFactorEnabled = false,
                            UserName = "maurice.slegtenhorst@outlook.com"
                        },
                        new
                        {
                            Id = "3af3698b-80b5-41d3-8df6-741b0fdc5af5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bdeb224-7ef6-4fd2-8bca-1804fb3e14e5",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mauricesoftwaresolution@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Maurice",
                            IsAdmitted = true,
                            LastName = "Slegtenhorst",
                            LockoutEnabled = true,
                            NormalizedEmail = "MAURICESOFTWARESOLUTION@OUTLOOK.COM",
                            NormalizedUserName = "MAURICESOFTWARESOLUTION@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "0645377536",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b39b5dd4-2891-4120-979c-e93aea777ad5",
                            TwoFactorEnabled = false,
                            UserName = "mauricesoftwaresolution@outlook.com"
                        },
                        new
                        {
                            Id = "e1bc4584-7092-4b9d-a0b7-f1d5c6e50b65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43e437f6-c961-4319-8ad9-f0d1c7e5b26b",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hanneke.slegtenhorst1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hanneke",
                            IsAdmitted = true,
                            LastName = "Slegtenhorst",
                            LockoutEnabled = true,
                            NormalizedEmail = "HANNEKE.SLEGTENHORST1@GMAIL.COM",
                            NormalizedUserName = "HANNEKE.SLEGTENHORST1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "060032679792",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d7ee83e7-79e9-451e-825b-9cbf9351a5be",
                            TwoFactorEnabled = false,
                            UserName = "hanneke.slegtenhorst1@gmail.com"
                        },
                        new
                        {
                            Id = "62e6f1b4-95fc-4a4b-843d-28aaac1941ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f7246a3-a735-4a05-ae41-b028a4639c21",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "privilegedemployee01@mss.nl",
                            EmailConfirmed = true,
                            FirstName = "PrivilegedEmployee_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "PRIVILEGEDEMPLOYEE01@MSS.NL",
                            NormalizedUserName = "PRIVILEGEDEMPLOYEE01@MSS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "060009960925",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0d57f85d-2093-4885-8a13-4aef55690350",
                            TwoFactorEnabled = false,
                            UserName = "privilegedemployee01@mss.nl"
                        },
                        new
                        {
                            Id = "6e528c37-afb7-474a-bbe4-5a8e9e24d20b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cd5c5eb-453c-4f7b-8485-2616d66fd1d7",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee01@mss.nl",
                            EmailConfirmed = true,
                            FirstName = "Employee_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "EMPLOYEE01@MSS.NL",
                            NormalizedUserName = "EMPLOYEE01@MSS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "060089732641",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "559b89b7-f246-4cf4-9ef3-781cadcdcd10",
                            TwoFactorEnabled = false,
                            UserName = "employee01@mss.nl"
                        },
                        new
                        {
                            Id = "d0dbd5a1-2521-4003-bfb2-b877a1ce90f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fddde952-2948-49e0-acdb-79c18ae6f3b4",
                            CreationDateUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "standarduser01@mss.nl",
                            EmailConfirmed = true,
                            FirstName = "StandardUser_01",
                            IsAdmitted = true,
                            LastName = "None",
                            LockoutEnabled = true,
                            NormalizedEmail = "STANDARDUSER01@MSS.NL",
                            NormalizedUserName = "STANDARDUSER01@MSS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBagDji8zpO0r7B54U0YvmEUuG28Jf3uBJzuE/GecANeaqLt6/hp+mziYGJQre+FZg==",
                            PhoneNumber = "060026515782",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8748c8ab-2cc4-4229-a48a-d704f254f821",
                            TwoFactorEnabled = false,
                            UserName = "standarduser01@mss.nl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "99f1c328-4932-4b6b-a354-519fcd46ce19",
                            ConcurrencyStamp = "274c76ae-562f-4793-828d-3f21718d5ffe",
                            Name = "StandardUser",
                            NormalizedName = "STANDARDUSER"
                        },
                        new
                        {
                            Id = "9a652007-2b59-442d-9948-23234713abde",
                            ConcurrencyStamp = "b838b45a-572e-4060-a17b-de25aece38f3",
                            Name = "PrivilegedUser",
                            NormalizedName = "PRIVILEGEDUSER"
                        },
                        new
                        {
                            Id = "b5875237-3e18-4a3f-a194-f9420180c365",
                            ConcurrencyStamp = "e34eb78a-64fd-4d32-9506-6a00d08f0079",
                            Name = "Volenteer",
                            NormalizedName = "VOLENTEER"
                        },
                        new
                        {
                            Id = "bb41cb6d-e04a-4fba-82df-d4a501109fbe",
                            ConcurrencyStamp = "7d36e474-ea2d-4db2-8bb5-61810a6d8e0d",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "411f2bc3-5ea0-4877-aa67-b15846c44a5e",
                            ConcurrencyStamp = "e1666af2-45bb-4982-8c1b-a825d91e871c",
                            Name = "PrivilegedEmployee",
                            NormalizedName = "PRIVILEGEDEMPLOYEE"
                        },
                        new
                        {
                            Id = "89117d00-9da7-48ef-8672-220ce82df13c",
                            ConcurrencyStamp = "44c5f1c1-58a4-4c8e-9566-3a9c6d9ba19c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "20d5598f-d724-46c0-8e95-d8cdfc983b4a",
                            RoleId = "89117d00-9da7-48ef-8672-220ce82df13c"
                        },
                        new
                        {
                            UserId = "3af3698b-80b5-41d3-8df6-741b0fdc5af5",
                            RoleId = "89117d00-9da7-48ef-8672-220ce82df13c"
                        },
                        new
                        {
                            UserId = "e1bc4584-7092-4b9d-a0b7-f1d5c6e50b65",
                            RoleId = "89117d00-9da7-48ef-8672-220ce82df13c"
                        },
                        new
                        {
                            UserId = "62e6f1b4-95fc-4a4b-843d-28aaac1941ad",
                            RoleId = "411f2bc3-5ea0-4877-aa67-b15846c44a5e"
                        },
                        new
                        {
                            UserId = "6e528c37-afb7-474a-bbe4-5a8e9e24d20b",
                            RoleId = "bb41cb6d-e04a-4fba-82df-d4a501109fbe"
                        },
                        new
                        {
                            UserId = "d0dbd5a1-2521-4003-bfb2-b877a1ce90f4",
                            RoleId = "99f1c328-4932-4b6b-a354-519fcd46ce19"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MSS.Domain.Concrete.DatabaseEntities.Credit.Credit", b =>
                {
                    b.HasOne("MSS.Domain.Concrete.DatabaseEntities.Credit.CreditCategory", "CreditCategory")
                        .WithMany("Credits")
                        .HasForeignKey("CreditCategoryId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MSS.Domain.Concrete.DatabaseEntities.UserAccount.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MSS.Domain.Concrete.DatabaseEntities.UserAccount.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSS.Domain.Concrete.DatabaseEntities.UserAccount.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MSS.Domain.Concrete.DatabaseEntities.UserAccount.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
